# About cloud-service-registry: Register and discover the micro-services #

In the micro-services world, Service Registry and Discovery plays an important role because we most likely run 
multiple instances of services and we need a mechanism to call other services without hardcoding their hostnames 
or port numbers.

By default, each Eureka Server is also a Eureka client and needs at least one service URL to locate a peer. 
As we are going to have a single Eureka Server node (Standalone Mode), we are going to disable this client-side 
behavior by configuring the following properties in application.properties file.

spring.application.name=service-registry
server.port=8761
eureka.instance.hostname=localhost
eureka.instance.client.registerWithEureka=false
eureka.instance.client.fetchRegistry=false
eureka.instance.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

# Reference #
https://sivalabs.in/2018/03/microservices-springcloud-eureka/