# About this Micro-Service #

1. Create: Simple micro-service from which we can get the product details. (Boot Project running on 8181)

2. Configuration: In this service we are going to fetch configuration values from spring-config-server.
                  (Boot project running on port 8888) http://localhost:8888/catalog-service/default

3. Registry the Service: Let us make this service as a Eureka Client and register with the 
                         Eureka Server(Boot Project running on port 8761).
   
   We just need to add eureka dependency in pom.xml and configure eureka-client property in application.properties
   [eureka.client.service-url.defaultZone=http://localhost:8761/eureka/] to automatically register with the Eureka Server.
   
4. With this configuration in place, start eureka service(coud-service-registry) and then start catalog-service and visit 
   http://localhost:8761
   You should see catalog-service is registered with SERVICE ID as CATALOG-SERVICE. You can also notice the status as UP(1) 
   which means the services are up and running and one instance of catalog-service is running.
  
5. TEST-Service:-  http://localhost:8181/api/products              http://localhost:8181/api/products/P001

6. Let us start another instance of catalog-service on a different port using the following command.
	
   java -jar -Dserver.port=9797 catalog-service-0.0.1-SNAPSHOT.jar

   Now if you go to http://localhost:8761 you will notice that 2 instances of catalog-service got registered and 
   you can see their host-name: port details as well.
      
   http://localhost:9797/api/products 				http://localhost:9797/api/products/P001
   
###===### INVOKE "inventory-service" from this service: MODIFY the Catalog-Service ###===###

We can use RestTemplate to invoke REST endpoint but there are 2 instances running.

We can register RestTemplate as a Spring bean with @LoadBalanced annotation. The RestTemplate with @LoadBalanced annotation 
will internally use Ribbon LoadBalancer to resolve the ServiceID and invoke REST endpoint using one of the available servers.

CONCEPT:=
Note that we have used http://inventory-service/api/inventory/{code} instead of
http://localhost:9898/api/inventory/{code} or http://localhost:9999/api/inventory/{code} directly.

With this kind of automatic Service Registration and Discovery mechanism, we no need to worry about how many instances
are running and what are their hostnames and ports etc.
